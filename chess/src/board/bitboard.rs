use super::{
	file_rank::{FileUtils, RankUtils},
	square::SquareUtils,
	Square,
};

pub type Bitboard = u64;

pub struct BitboardUtils;

impl BitboardUtils {
	pub const EMPTY: Bitboard = 0;

	#[rustfmt::skip]
	pub const FILES: [Bitboard; FileUtils::SIZE] = [
		0x0101010101010101, 0x0202020202020202, 0x0404040404040404, 0x0808080808080808,
		0x1010101010101010, 0x2020202020202020, 0x4040404040404040, 0x8080808080808080,
	];

    #[rustfmt::skip]
	pub const RANKS: [Bitboard; RankUtils::SIZE] = [
		0x00000000000000FF, 0x000000000000FF00, 0x0000000000FF0000, 0x00000000FF000000,
		0x000000FF00000000, 0x0000FF0000000000, 0x00FF000000000000, 0xFF00000000000000,
	];

    #[rustfmt::skip]
	pub const SQUARES: [Bitboard; SquareUtils::SIZE] = [
		0x0000000000000001, 0x0000000000000002, 0x0000000000000004, 0x0000000000000008,
		0x0000000000000010, 0x0000000000000020, 0x0000000000000040, 0x0000000000000080,
		0x0000000000000100, 0x0000000000000200, 0x0000000000000400, 0x0000000000000800,
		0x0000000000001000, 0x0000000000002000, 0x0000000000004000, 0x0000000000008000,
		0x0000000000010000, 0x0000000000020000, 0x0000000000040000, 0x0000000000080000,
		0x0000000000100000, 0x0000000000200000, 0x0000000000400000, 0x0000000000800000,
		0x0000000001000000, 0x0000000002000000, 0x0000000004000000, 0x0000000008000000,
		0x0000000010000000, 0x0000000020000000, 0x0000000040000000, 0x0000000080000000,
		0x0000000100000000, 0x0000000200000000, 0x0000000400000000, 0x0000000800000000,
		0x0000001000000000, 0x0000002000000000, 0x0000004000000000, 0x0000008000000000,
		0x0000010000000000, 0x0000020000000000, 0x0000040000000000, 0x0000080000000000,
		0x0000100000000000, 0x0000200000000000, 0x0000400000000000, 0x0000800000000000,
		0x0001000000000000, 0x0002000000000000, 0x0004000000000000, 0x0008000000000000,
		0x0010000000000000, 0x0020000000000000, 0x0040000000000000, 0x0080000000000000,
		0x0100000000000000, 0x0200000000000000, 0x0400000000000000, 0x0800000000000000,
		0x1000000000000000, 0x2000000000000000, 0x4000000000000000, 0x8000000000000000,
	];
}

impl BitboardUtils {
	#[inline(always)]
	pub fn pop_lsb(bitboard: &mut Bitboard) -> Square {
		let lsb = bitboard.trailing_zeros() as Square;
		*bitboard &= *bitboard - 1;
		lsb
	}

	#[inline(always)]
	pub fn lsb(bitboard: Bitboard) -> Square {
		bitboard.trailing_zeros() as Square
	}

	#[inline(always)]
	pub fn occupied(bitboard: Bitboard, square: Square) -> bool {
		bitboard & Self::SQUARES[square] > 0
	}

	pub fn to_string(bitboard: Bitboard) -> String {
		let mut string = String::new();

		for rank in RankUtils::RANGE.rev() {
			for file in FileUtils::RANGE {
				let square = SquareUtils::from_location(file, rank);

				string.push_str(match Self::occupied(bitboard, square) {
					true => "1 ",
					false => "0 ",
				});
			}

			string.push('\n');
		}

		string
	}
}
